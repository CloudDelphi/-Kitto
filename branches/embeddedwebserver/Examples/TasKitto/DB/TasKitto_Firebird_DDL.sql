/*******************************************************************************
 * Selected metadata objects
 * -------------------------
 * Extracted at 22/10/2011 0.54.20
 ******************************************************************************/

/*******************************************************************************
 * Tables
 * ------
 * Extracted at 22/10/2011 0.54.20
 ******************************************************************************/

CREATE TABLE ACTIVITY 
(
  ACTIVITY_ID                VARCHAR(    32) NOT NULL COLLATE UTF8,
  PHASE_ID                   VARCHAR(    32) NOT NULL COLLATE UTF8,
  EMPLOYEE_ID                VARCHAR(    32) NOT NULL COLLATE UTF8,
  ROLE_ID                    VARCHAR(    32) NOT NULL COLLATE UTF8,
  TYPE_ID                    VARCHAR(    32) NOT NULL COLLATE UTF8,
  ACTIVITY_DATE                 DATE         NOT NULL,
  START_TIME                    TIME,
  END_TIME                      TIME,
  STATUS                     VARCHAR(    12)  COLLATE UTF8,
 CONSTRAINT PK_ACTIVITY PRIMARY KEY (ACTIVITY_ID)
);
CREATE TABLE ACTIVITY_TYPE 
(
  TYPE_ID                VARCHAR(    32) NOT NULL COLLATE UTF8,
  TYPE_NAME              VARCHAR(    20) NOT NULL COLLATE UTF8,
 CONSTRAINT PK_ACTIVITY_TYPE PRIMARY KEY (TYPE_ID)
);
CREATE TABLE CUSTOMER 
(
  CUSTOMER_ID                VARCHAR(    32) NOT NULL COLLATE UTF8,
  CUSTOMER_NAME              VARCHAR(    40) NOT NULL COLLATE UTF8,
  ADDRESS                    VARCHAR(    60)  COLLATE UTF8,
  CITY                       VARCHAR(    60)  COLLATE UTF8,
  PHONE                      VARCHAR(    20)  COLLATE UTF8,
  EMAIL                      VARCHAR(    60)  COLLATE UTF8,
  STATUS                     VARCHAR(    10)  COLLATE UTF8,
 CONSTRAINT PK_CUSTOMER PRIMARY KEY (CUSTOMER_ID)
);
CREATE TABLE EMPLOYEE 
(
  EMPLOYEE_ID                VARCHAR(    32) NOT NULL COLLATE UTF8,
  EMPLOYEE_NAME              VARCHAR(    40) NOT NULL COLLATE UTF8,
  EMPLOYEE_TYPE              VARCHAR(    20)  COLLATE UTF8,
 CONSTRAINT PK_EMPLOYEE PRIMARY KEY (EMPLOYEE_ID)
);
CREATE TABLE OPERATOR_ROLE 
(
  ROLE_ID                VARCHAR(    32) NOT NULL COLLATE UTF8,
  ROLE_NAME              VARCHAR(    20) NOT NULL COLLATE UTF8,
  FEE                      FLOAT,
 CONSTRAINT PK_OPERATOR_ROLE PRIMARY KEY (ROLE_ID)
);
CREATE TABLE PHASE 
(
  PHASE_ID                VARCHAR(    32) NOT NULL COLLATE UTF8,
  PHASE_NAME              VARCHAR(    40) NOT NULL COLLATE UTF8,
  PROJECT_ID              VARCHAR(    32) NOT NULL COLLATE UTF8,
  START_DATE                 DATE,
  END_DATE                   DATE,
  STATUS                  VARCHAR(    12)  COLLATE UTF8,
 CONSTRAINT PK_PHASE PRIMARY KEY (PHASE_ID)
);
CREATE TABLE PROJECT 
(
  PROJECT_ID                VARCHAR(    32) NOT NULL COLLATE UTF8,
  PROJECT_NAME              VARCHAR(    40) NOT NULL COLLATE UTF8,
  CUSTOMER_ID               VARCHAR(    32) NOT NULL COLLATE UTF8,
  STATUS                    VARCHAR(    12)  COLLATE UTF8,
 CONSTRAINT PK_PROJECT PRIMARY KEY (PROJECT_ID)
);

CREATE TABLE KITTO_USERS
(
  USER_NAME                  VARCHAR(    20) NOT NULL,
  PASSWORD_HASH              VARCHAR(    20) NOT NULL,
  IS_ACTIVE                 SMALLINT,
 CONSTRAINT PK_KITTO_USERS PRIMARY KEY (USER_NAME)
);

/*******************************************************************************
 * Foreign Key Constraints
 * -----------------------
 * Extracted at 22/10/2011 0.54.20
 ******************************************************************************/

ALTER TABLE PROJECT ADD CONSTRAINT DT_PROJECT_CUSTOMER
  FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER
  (CUSTOMER_ID)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION
;

ALTER TABLE PHASE ADD CONSTRAINT DT_PHASE_PROJECT
  FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT
  (PROJECT_ID) 
  ON DELETE NO ACTION
  ON UPDATE NO ACTION
;

ALTER TABLE ACTIVITY ADD CONSTRAINT DT_ACTIVITY_PHASE
  FOREIGN KEY (PHASE_ID) REFERENCES PHASE
  (PHASE_ID) 
  ON DELETE NO ACTION
  ON UPDATE NO ACTION
;

ALTER TABLE ACTIVITY ADD CONSTRAINT FK_ACTIVITY_ACTIVITY_TYPE 
  FOREIGN KEY (TYPE_ID) REFERENCES ACTIVITY_TYPE
  (TYPE_ID) 
  ON DELETE NO ACTION
  ON UPDATE NO ACTION
;

ALTER TABLE ACTIVITY ADD CONSTRAINT FK_ACTIVITY_OPERATOR_ROLE 
  FOREIGN KEY (ROLE_ID) REFERENCES OPERATOR_ROLE
  (ROLE_ID) 
  ON DELETE NO ACTION
  ON UPDATE NO ACTION
;

ALTER TABLE ACTIVITY ADD CONSTRAINT FK_ACTIVITY_EMPLOYEE 
  FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE
  (EMPLOYEE_ID) 
  ON DELETE NO ACTION
  ON UPDATE NO ACTION
;

=============================================================
/********************* ROLES **********************/

CREATE ROLE RDB$ADMIN;
/********************* UDFS ***********************/

/****************** GENERATORS ********************/

/******************** DOMAINS *********************/

/******************* PROCEDURES ******************/

/******************** TABLES **********************/

CREATE TABLE ACTIVITY
(
  ACTIVITY_ID Varchar(32) NOT NULL,
  PHASE_ID Varchar(32) NOT NULL,
  EMPLOYEE_ID Varchar(32) NOT NULL,
  ROLE_ID Varchar(32) NOT NULL,
  TYPE_ID Varchar(32) NOT NULL,
  ACTIVITY_DATE Date NOT NULL,
  START_TIME Time,
  END_TIME Time,
  STATUS Varchar(12),
  CONSTRAINT PK_ACTIVITY PRIMARY KEY (ACTIVITY_ID)
);
CREATE TABLE ACTIVITY_TYPE
(
  TYPE_ID Varchar(32) NOT NULL,
  TYPE_NAME Varchar(20) NOT NULL,
  CONSTRAINT PK_ACTIVITY_TYPE PRIMARY KEY (TYPE_ID)
);
CREATE TABLE CUSTOMER
(
  CUSTOMER_ID Varchar(32) NOT NULL,
  CUSTOMER_NAME Varchar(40) NOT NULL,
  ADDRESS Varchar(60),
  CITY Varchar(60),
  PHONE Varchar(20),
  EMAIL Varchar(60),
  STATUS Varchar(10),
  CONSTRAINT PK_CUSTOMER PRIMARY KEY (CUSTOMER_ID)
);
CREATE TABLE EMPLOYEE
(
  EMPLOYEE_ID Varchar(32) NOT NULL,
  EMPLOYEE_NAME Varchar(40) NOT NULL,
  EMPLOYEE_TYPE Varchar(20),
  CONSTRAINT PK_EMPLOYEE PRIMARY KEY (EMPLOYEE_ID)
);
CREATE TABLE KITTO_USERS
(
  USER_NAME Varchar(32) NOT NULL,
  PASSWORD_HASH Varchar(32),
  IS_ACTIVE Smallint,
  CONSTRAINT PK_KITTO_USERS PRIMARY KEY (USER_NAME)
);
CREATE TABLE OPERATOR_ROLE
(
  ROLE_ID Varchar(32) NOT NULL,
  ROLE_NAME Varchar(20) NOT NULL,
  FEE Float,
  CONSTRAINT PK_OPERATOR_ROLE PRIMARY KEY (ROLE_ID)
);
CREATE TABLE PHASE
(
  PHASE_ID Varchar(32) NOT NULL,
  PHASE_NAME Varchar(40) NOT NULL,
  PROJECT_ID Varchar(32) NOT NULL,
  START_DATE Date,
  END_DATE Date,
  STATUS Varchar(12),
  CONSTRAINT PK_PHASE PRIMARY KEY (PHASE_ID)
);
CREATE TABLE PROJECT
(
  PROJECT_ID Varchar(32) NOT NULL,
  PROJECT_NAME Varchar(40) NOT NULL,
  CUSTOMER_ID Varchar(32) NOT NULL,
  STATUS Varchar(12),
  CONSTRAINT PK_PROJECT PRIMARY KEY (PROJECT_ID)
);
/********************* VIEWS **********************/

/******************* EXCEPTIONS *******************/

/******************** TRIGGERS ********************/


ALTER TABLE ACTIVITY ADD CONSTRAINT DT_ACTIVITY_PHASE
  FOREIGN KEY (PHASE_ID) REFERENCES PHASE (PHASE_ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE ACTIVITY ADD CONSTRAINT FK_ACTIVITY_ACTIVITY_TYPE
  FOREIGN KEY (TYPE_ID) REFERENCES ACTIVITY_TYPE (TYPE_ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE ACTIVITY ADD CONSTRAINT FK_ACTIVITY_EMPLOYEE
  FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE (EMPLOYEE_ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE ACTIVITY ADD CONSTRAINT FK_ACTIVITY_OPERATOR_ROLE
  FOREIGN KEY (ROLE_ID) REFERENCES OPERATOR_ROLE (ROLE_ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE PHASE ADD CONSTRAINT DT_PHASE_PROJECT
  FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT (PROJECT_ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE PROJECT ADD CONSTRAINT DT_PROJECT_CUSTOMER
  FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ACTIVITY TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON ACTIVITY_TYPE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON CUSTOMER TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON EMPLOYEE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON KITTO_USERS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON OPERATOR_ROLE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PHASE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON PROJECT TO  SYSDBA WITH GRANT OPTION;

